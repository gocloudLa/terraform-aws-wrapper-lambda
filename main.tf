module "lambda" {
  for_each = var.lambda_parameters
  source   = "terraform-aws-modules/lambda/aws"
  version  = "8.0.1"

  create_function = true

  function_name          = "${local.common_name}-${each.key}"
  handler                = try(each.value.handler, var.lambda_defaults.handler, "index.lambda_handler")
  runtime                = try(each.value.runtime, var.lambda_defaults.runtime, "python3.9")
  memory_size            = try(each.value.memory_size, var.lambda_defaults.memory_size, 128)
  ephemeral_storage_size = try(each.value.ephemeral_storage_size, var.lambda_defaults.ephemeral_storage_size, 512)
  vpc_security_group_ids = try(local.vpc_attachment_variables[each.key].vpc_security_group_ids, var.lambda_defaults.vpc_security_group_ids, null)
  vpc_subnet_ids         = try(local.vpc_attachment_variables[each.key].vpc_subnet_ids, var.lambda_defaults.vpc_security_group_ids, null)
  attach_network_policy  = try(local.vpc_attachment_variables[each.key].attach_network_policy, var.lambda_defaults.attach_network_policy, false)
  local_existing_package = try(local.local_existing_package_calculated[each.key], var.lambda_defaults.local_existing_package_calculated, null)
  allowed_triggers       = merge(try(each.value.allowed_triggers, {}), lookup(local.custom_allowed_triggers_calculated, each.key, {}))
  event_source_mapping   = merge(try(each.value.event_source_mapping, {}), lookup(local.custom_event_source_mapping_calculated, each.key, {}))

  architectures                                = try(each.value.architectures, var.lambda_defaults.architectures, null)
  artifacts_dir                                = try(each.value.artifacts_dir, var.lambda_defaults.artifacts_dir, "builds")
  assume_role_policy_statements                = try(each.value.assume_role_policy_statements, var.lambda_defaults.assume_role_policy_statements, {})
  attach_async_event_policy                    = try(each.value.attach_async_event_policy, var.lambda_defaults.attach_async_event_policy, false)
  attach_cloudwatch_logs_policy                = try(each.value.attach_cloudwatch_logs_policy, var.lambda_defaults.attach_cloudwatch_logs_policy, true)
  attach_create_log_group_permission           = try(each.value.attach_create_log_group_permission, var.lambda_defaults.attach_create_log_group_permission, true)
  attach_dead_letter_policy                    = try(each.value.attach_dead_letter_policy, var.lambda_defaults.attach_dead_letter_policy, false)
  attach_policies                              = try(each.value.attach_policies, var.lambda_defaults.attach_policies, false)
  attach_policy                                = try(each.value.attach_policy, var.lambda_defaults.attach_policy, false)
  attach_policy_json                           = try(each.value.attach_policy_json, var.lambda_defaults.attach_policy_json, false)
  attach_policy_jsons                          = try(each.value.attach_policy_jsons, var.lambda_defaults.attach_policy_jsons, false)
  attach_policy_statements                     = try(each.value.attach_policy_statements, var.lambda_defaults.attach_policy_statements, false)
  attach_tracing_policy                        = try(each.value.attach_tracing_policy, var.lambda_defaults.attach_tracing_policy, false)
  authorization_type                           = try(each.value.authorization_type, var.lambda_defaults.authorization_type, "NONE")
  build_in_docker                              = try(each.value.build_in_docker, var.lambda_defaults.build_in_docker, false)
  cloudwatch_logs_kms_key_id                   = try(each.value.cloudwatch_logs_kms_key_id, var.lambda_defaults.cloudwatch_logs_kms_key_id, null)
  cloudwatch_logs_log_group_class              = try(each.value.cloudwatch_logs_log_group_class, var.lambda_defaults.cloudwatch_logs_log_group_class, null)
  cloudwatch_logs_retention_in_days            = try(each.value.cloudwatch_logs_retention_in_days, var.lambda_defaults.cloudwatch_logs_retention_in_days, null)
  cloudwatch_logs_skip_destroy                 = try(each.value.cloudwatch_logs_skip_destroy, var.lambda_defaults.cloudwatch_logs_skip_destroy, false)
  cloudwatch_logs_tags                         = try(each.value.cloudwatch_logs_tags, var.lambda_defaults.cloudwatch_logs_tags, {})
  code_signing_config_arn                      = try(each.value.code_signing_config_arn, var.lambda_defaults.code_signing_config_arn, null)
  compatible_architectures                     = try(each.value.compatible_architectures, var.lambda_defaults.compatible_architectures, null)
  compatible_runtimes                          = try(each.value.compatible_runtimes, var.lambda_defaults.compatible_runtimes, [])
  cors                                         = try(each.value.cors, var.lambda_defaults.cors, {})
  create                                       = try(each.value.create, var.lambda_defaults.create, true)
  create_async_event_config                    = try(each.value.create_async_event_config, var.lambda_defaults.create_async_event_config, false)
  create_current_version_allowed_triggers      = try(each.value.create_current_version_allowed_triggers, var.lambda_defaults.create_current_version_allowed_triggers, true)
  create_current_version_async_event_config    = try(each.value.create_current_version_async_event_config, var.lambda_defaults.create_current_version_async_event_config, true)
  create_lambda_function_url                   = try(each.value.create_lambda_function_url, var.lambda_defaults.create_lambda_function_url, false)
  create_layer                                 = try(each.value.create_layer, var.lambda_defaults.create_layer, false)
  create_package                               = try(each.value.create_package, var.lambda_defaults.create_package, true)
  create_role                                  = try(each.value.create_role, var.lambda_defaults.create_role, true)
  create_sam_metadata                          = try(each.value.create_sam_metadata, var.lambda_defaults.create_sam_metadata, false)
  create_unqualified_alias_allowed_triggers    = try(each.value.create_unqualified_alias_allowed_triggers, var.lambda_defaults.create_unqualified_alias_allowed_triggers, true)
  create_unqualified_alias_async_event_config  = try(each.value.create_unqualified_alias_async_event_config, var.lambda_defaults.create_unqualified_alias_async_event_config, true)
  create_unqualified_alias_lambda_function_url = try(each.value.create_unqualified_alias_lambda_function_url, var.lambda_defaults.create_unqualified_alias_lambda_function_url, true)
  dead_letter_target_arn                       = try(each.value.dead_letter_target_arn, var.lambda_defaults.dead_letter_target_arn, null)
  description                                  = try(each.value.description, var.lambda_defaults.description, "")
  destination_on_failure                       = try(each.value.destination_on_failure, var.lambda_defaults.destination_on_failure, null)
  destination_on_success                       = try(each.value.destination_on_success, var.lambda_defaults.destination_on_success, null)
  docker_additional_options                    = try(each.value.docker_additional_options, var.lambda_defaults.docker_additional_options, [])
  docker_build_root                            = try(each.value.docker_build_root, var.lambda_defaults.docker_build_root, "")
  docker_entrypoint                            = try(each.value.docker_entrypoint, var.lambda_defaults.docker_entrypoint, null)
  docker_file                                  = try(each.value.docker_file, var.lambda_defaults.docker_file, "")
  docker_image                                 = try(each.value.docker_image, var.lambda_defaults.docker_image, "")
  docker_pip_cache                             = try(each.value.docker_pip_cache, var.lambda_defaults.docker_pip_cache, null)
  docker_with_ssh_agent                        = try(each.value.docker_with_ssh_agent, var.lambda_defaults.docker_with_ssh_agent, false)
  environment_variables                        = try(each.value.environment_variables, var.lambda_defaults.environment_variables, {})
  file_system_arn                              = try(each.value.file_system_arn, var.lambda_defaults.file_system_arn, null)
  file_system_local_mount_path                 = try(each.value.file_system_local_mount_path, var.lambda_defaults.file_system_local_mount_path, null)
  function_tags                                = try(each.value.function_tags, var.lambda_defaults.function_tags, {})
  hash_extra                                   = try(each.value.hash_extra, var.lambda_defaults.hash_extra, "")
  ignore_source_code_hash                      = try(each.value.ignore_source_code_hash, var.lambda_defaults.ignore_source_code_hash, false)
  image_config_command                         = try(each.value.image_config_command, var.lambda_defaults.image_config_command, [])
  image_config_entry_point                     = try(each.value.image_config_entry_point, var.lambda_defaults.image_config_entry_point, [])
  image_config_working_directory               = try(each.value.image_config_working_directory, var.lambda_defaults.image_config_working_directory, null)
  image_uri                                    = try(each.value.image_uri, var.lambda_defaults.image_uri, null)
  include_default_tag                          = try(each.value.include_default_tag, var.lambda_defaults.include_default_tag, true)
  invoke_mode                                  = try(each.value.invoke_mode, var.lambda_defaults.invoke_mode, null)
  ipv6_allowed_for_dual_stack                  = try(each.value.ipv6_allowed_for_dual_stack, var.lambda_defaults.ipv6_allowed_for_dual_stack, null)
  kms_key_arn                                  = try(each.value.kms_key_arn, var.lambda_defaults.kms_key_arn, null)
  lambda_at_edge                               = try(each.value.lambda_at_edge, var.lambda_defaults.lambda_at_edge, false)
  lambda_at_edge_logs_all_regions              = try(each.value.lambda_at_edge_logs_all_regions, var.lambda_defaults.lambda_at_edge_logs_all_regions, true)
  lambda_role                                  = try(each.value.lambda_role, var.lambda_defaults.lambda_role, "")
  layer_name                                   = try(each.value.layer_name, var.lambda_defaults.layer_name, "")
  layer_skip_destroy                           = try(each.value.layer_skip_destroy, var.lambda_defaults.layer_skip_destroy, false)
  layers                                       = try(each.value.layers, var.lambda_defaults.layers, null)
  license_info                                 = try(each.value.license_info, var.lambda_defaults.license_info, "")
  logging_application_log_level                = try(each.value.logging_application_log_level, var.lambda_defaults.logging_application_log_level, "INFO")
  logging_log_format                           = try(each.value.logging_log_format, var.lambda_defaults.logging_log_format, "Text")
  logging_log_group                            = try(each.value.logging_log_group, var.lambda_defaults.logging_log_group, null)
  logging_system_log_level                     = try(each.value.logging_system_log_level, var.lambda_defaults.logging_system_log_level, "INFO")
  maximum_event_age_in_seconds                 = try(each.value.maximum_event_age_in_seconds, var.lambda_defaults.maximum_event_age_in_seconds, null)
  maximum_retry_attempts                       = try(each.value.maximum_retry_attempts, var.lambda_defaults.maximum_retry_attempts, null)
  number_of_policies                           = try(each.value.number_of_policies, var.lambda_defaults.number_of_policies, 0)
  number_of_policy_jsons                       = try(each.value.number_of_policy_jsons, var.lambda_defaults.number_of_policy_jsons, 0)
  package_type                                 = try(each.value.package_type, var.lambda_defaults.package_type, "Zip")
  policies                                     = try(each.value.policies, var.lambda_defaults.policies, [])
  policy                                       = try(each.value.policy, var.lambda_defaults.policy, null)
  policy_json                                  = try(each.value.policy_json, var.lambda_defaults.policy_json, null)
  policy_jsons                                 = try(each.value.policy_jsons, var.lambda_defaults.policy_jsons, [])
  policy_name                                  = try(each.value.policy_name, var.lambda_defaults.policy_name, null)
  policy_statements                            = try(each.value.policy_statements, var.lambda_defaults.policy_statements, {})
  provisioned_concurrent_executions            = try(each.value.provisioned_concurrent_executions, var.lambda_defaults.provisioned_concurrent_executions, -1)
  publish                                      = try(each.value.publish, var.lambda_defaults.publish, false)
  putin_khuylo                                 = try(each.value.putin_khuylo, var.lambda_defaults.putin_khuylo, true)
  quiet_archive_local_exec                     = try(each.value.quiet_archive_local_exec, var.lambda_defaults.quiet_archive_local_exec, true)
  recreate_missing_package                     = try(each.value.recreate_missing_package, var.lambda_defaults.recreate_missing_package, true)
  recursive_loop                               = try(each.value.recursive_loop, var.lambda_defaults.recursive_loop, null)
  region                                       = try(each.value.region, var.lambda_defaults.region, null)
  replace_security_groups_on_destroy           = try(each.value.replace_security_groups_on_destroy, var.lambda_defaults.replace_security_groups_on_destroy, null)
  replacement_security_group_ids               = try(each.value.replacement_security_group_ids, var.lambda_defaults.replacement_security_group_ids, null)
  reserved_concurrent_executions               = try(each.value.reserved_concurrent_executions, var.lambda_defaults.reserved_concurrent_executions, -1)
  role_description                             = try(each.value.role_description, var.lambda_defaults.role_description, null)
  role_force_detach_policies                   = try(each.value.role_force_detach_policies, var.lambda_defaults.role_force_detach_policies, true)
  role_maximum_session_duration                = try(each.value.role_maximum_session_duration, var.lambda_defaults.role_maximum_session_duration, 3600)
  role_name                                    = try(each.value.role_name, var.lambda_defaults.role_name, null)
  role_path                                    = try(each.value.role_path, var.lambda_defaults.role_path, null)
  role_permissions_boundary                    = try(each.value.role_permissions_boundary, var.lambda_defaults.role_permissions_boundary, null)
  role_tags                                    = try(each.value.role_tags, var.lambda_defaults.role_tags, {})
  s3_acl                                       = try(each.value.s3_acl, var.lambda_defaults.s3_acl, "private")
  s3_bucket                                    = try(each.value.s3_bucket, var.lambda_defaults.s3_bucket, null)
  s3_existing_package                          = try(each.value.s3_existing_package, var.lambda_defaults.s3_existing_package, null)
  s3_kms_key_id                                = try(each.value.s3_kms_key_id, var.lambda_defaults.s3_kms_key_id, null)
  s3_object_override_default_tags              = try(each.value.s3_object_override_default_tags, var.lambda_defaults.s3_object_override_default_tags, false)
  s3_object_storage_class                      = try(each.value.s3_object_storage_class, var.lambda_defaults.s3_object_storage_class, "ONEZONE_IA")
  s3_object_tags                               = try(each.value.s3_object_tags, var.lambda_defaults.s3_object_tags, {})
  s3_object_tags_only                          = try(each.value.s3_object_tags_only, var.lambda_defaults.s3_object_tags_only, false)
  s3_prefix                                    = try(each.value.s3_prefix, var.lambda_defaults.s3_prefix, null)
  s3_server_side_encryption                    = try(each.value.s3_server_side_encryption, var.lambda_defaults.s3_server_side_encryption, null)
  skip_destroy                                 = try(each.value.skip_destroy, var.lambda_defaults.skip_destroy, null)
  snap_start                                   = try(each.value.snap_start, var.lambda_defaults.snap_start, false)
  source_path                                  = try(each.value.source_path, var.lambda_defaults.source_path, null)
  store_on_s3                                  = try(each.value.store_on_s3, var.lambda_defaults.store_on_s3, false)
  timeout                                      = try(each.value.timeout, var.lambda_defaults.timeout, 3)
  timeouts                                     = try(each.value.timeouts, var.lambda_defaults.timeouts, {})
  tracing_mode                                 = try(each.value.tracing_mode, var.lambda_defaults.tracing_mode, null)
  trigger_on_package_timestamp                 = try(each.value.trigger_on_package_timestamp, var.lambda_defaults.trigger_on_package_timestamp, true)
  trusted_entities                             = try(each.value.trusted_entities, var.lambda_defaults.trusted_entities, [])
  use_existing_cloudwatch_log_group            = try(each.value.use_existing_cloudwatch_log_group, var.lambda_defaults.use_existing_cloudwatch_log_group, false)

  tags = merge(local.common_tags, { workload = each.key }, try(each.value.tags, var.lambda_defaults.tags, null))
}